# Generated by Django 3.2 on 2021-07-05 09:02

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('first_name', models.CharField(max_length=150, null=True, verbose_name='first name')),
                ('last_name', models.CharField(max_length=150, null=True, verbose_name='last name')),
                ('middle_name', models.CharField(max_length=150, null=True, verbose_name='last name')),
                ('email', models.EmailField(max_length=25, unique=True)),
                ('is_IT', models.BooleanField(default=False)),
                ('admin', models.BooleanField(default=False)),
                ('is_Lecturer', models.BooleanField(default=False)),
                ('is_Student', models.BooleanField(default=False)),
                ('is_Bursar', models.BooleanField(default=False)),
                ('is_HOD', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'login',
            },
        ),
        migrations.CreateModel(
            name='HealtData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('blood_group', models.CharField(default='', max_length=300)),
                ('genotype', models.CharField(default='', max_length=300)),
                ('allergies', models.TextField(blank=True)),
                ('diabetes', models.BooleanField(default=False)),
                ('STIs', models.TextField()),
                ('heart_disease', models.TextField(blank=True)),
                ('disabilities', models.TextField(blank=True)),
                ('respiratory_problems', models.TextField(blank=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='healt_data', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'healt_data',
            },
        ),
        migrations.CreateModel(
            name='FamilyData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('next_of_kin', models.CharField(default='', max_length=300)),
                ('next_of_kin_phone', models.CharField(default='', max_length=300)),
                ('next_of_kin_address', models.CharField(default='', max_length=300)),
                ('guardian', models.CharField(default='', max_length=300)),
                ('guardian_address', models.CharField(default='', max_length=300)),
                ('guardian_phone', models.CharField(default='', max_length=300)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='family_data', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'family_data',
            },
        ),
        migrations.CreateModel(
            name='BioData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('matric_no', models.CharField(default='', max_length=300)),
                ('marital_status', models.CharField(choices=[('Single', 'Single'), ('Married', 'Married'), ('Divorced', 'Divorced')], default='', max_length=300)),
                ('gender', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female'), ('Other', 'Other')], default='', max_length=300)),
                ('religion', models.CharField(choices=[('Christianity', 'Christianity'), ('Islam', 'Islam'), ('Other', 'Other')], default='', max_length=300)),
                ('nationality', models.CharField(max_length=300)),
                ('state_of_origin', models.CharField(default='', max_length=300)),
                ('local_govt', models.CharField(default='', max_length=300)),
                ('permanent_address', models.CharField(default='', max_length=300)),
                ('phone1', models.CharField(default='', max_length=20)),
                ('phone2', models.CharField(default='', max_length=20)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='media/')),
                ('birthday', models.DateField(null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='biodata', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'biodata',
            },
        ),
        migrations.CreateModel(
            name='AcademicData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('department', models.CharField(default='', max_length=300)),
                ('programme', models.CharField(default='', max_length=300)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='academic_data', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'academic_data',
            },
        ),
    ]
